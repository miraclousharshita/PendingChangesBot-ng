name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to test'
        required: true
        type: number

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'pull_request'

    steps:
    - name: Get PR details for manual dispatch
      if: github.event_name == 'workflow_dispatch'
      id: pr_details
      continue-on-error: false
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.inputs.pr_number }}
            });

            // Check if PR is from a fork
            const isFork = pr.data.head.repo.full_name !== context.repo.owner + '/' + context.repo.repo;
            if (isFork) {
              core.warning('PR is from a fork. Checking out fork branch.');
            }

            core.setOutput('ref', pr.data.head.ref);
            core.setOutput('sha', pr.data.head.sha);
            core.setOutput('repo', pr.data.head.repo.full_name);
          } catch (error) {
            core.setFailed(`Failed to fetch PR #${{ github.event.inputs.pr_number }}: ${error.message}`);
          }

    - name: Checkout code
      if: github.event_name != 'workflow_dispatch' || steps.pr_details.outcome == 'success'
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event_name == 'workflow_dispatch' && steps.pr_details.outputs.ref || github.ref }}
        repository: ${{ github.event_name == 'workflow_dispatch' && steps.pr_details.outputs.repo || github.repository }}
        fetch-depth: 0
        persist-credentials: false

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Ruff linting
      run: ruff check app/

    - name: Run Ruff format check
      run: ruff format --check app/

    - name: Check for missing migrations
      working-directory: ./app
      run: python manage.py makemigrations --check --dry-run

    - name: Run database migrations
      working-directory: ./app
      run: python manage.py migrate

    - name: Run tests
      working-directory: ./app
      run: python manage.py test

  label-pr:
    name: Update PR Labels
    runs-on: ubuntu-latest
    needs: test
    if: always() && github.event_name == 'pull_request'
    permissions:
      pull-requests: write

    steps:
    - name: Add ready-for-review label on success
      if: needs.test.result == 'success'
      uses: actions-ecosystem/action-add-labels@v1
      with:
        labels: ready-for-review

    - name: Remove changes-required label on success
      if: needs.test.result == 'success'
      uses: actions-ecosystem/action-remove-labels@v1
      with:
        labels: changes-required
      continue-on-error: true

    - name: Add changes-required label on failure
      if: needs.test.result == 'failure'
      uses: actions-ecosystem/action-add-labels@v1
      with:
        labels: changes-required

    - name: Remove ready-for-review label on failure
      if: needs.test.result == 'failure'
      uses: actions-ecosystem/action-remove-labels@v1
      with:
        labels: ready-for-review
      continue-on-error: true
